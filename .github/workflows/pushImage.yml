name: Push Image Workflow

on:
  create:
  push:
    branches:
      - release/**
      - develop
    paths-ignore:
      - "*.md"

env:
  AWS_REGION: eu-west-2

jobs:
  test:
    name: Test app

    # Need to check here as create event can't be filtered by branch name: https://github.com/orgs/community/discussions/54860
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Generate source files hash
        id: source-file-hash
        run: |
          NAME=${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          echo "name=$NAME" >> $GITHUB_OUTPUT

      - name: Generate yarn lock hash
        id: yarn-lock-hash
        run: |
          NAME=${{ hashFiles('**/yarn.lock') }}
          echo "name=$NAME" >> $GITHUB_OUTPUT

      - name: Generate .env files
        run: cp .env.example .env

      - name: Read .nvmrc
        run: echo "name=NVMRC::$(cat .nvmrc)" >> $GITHUB_OUTPUT
        id: nvm

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      # Based on steps described here - https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching#github-actions
      - name: Next cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.next/cache
          key: next-cache-${{ steps.yarn-lock-hash.outputs.name }}-${{ steps.source-file-hash.outputs.name  }}
          restore-keys: next-cache-${{ steps.yarn-lock-hash.outputs.name }}-

      - name: Build application
        run: yarn build

      - name: Lint files
        run: yarn lint

      - name: Units Tests
        run: yarn jest --ci

  build:
    # Need to check here as create event can't be filtered by branch name: https://github.com/orgs/community/discussions/54860
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release')

    name: Build docker image

    runs-on: ubuntu-latest

    outputs:
      docker-image-name: ${{ steps.docker-image-name.outputs.name }}

    steps:
      - uses: actions/checkout@v3
        with:
          # Fetch all commits since we use the total commit count to determine the build version
          fetch-depth: 0

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine & set BUILD_VERSION
        run: |
          GIT_COUNT=$(git rev-list $GITHUB_SHA --count)
          echo "BUILD_VERSION=b_$GIT_COUNT" >> $GITHUB_ENV
          echo BUILD_VERSION is ${{ env.BUILD_VERSION }}

      - name: Generate .env files
        run: cp .env.example .env

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: docker build -t $ECR_REGISTRY/find-a-grant-client:${{ env.BUILD_VERSION }} .

      - name: Generate Docker image name
        id: docker-image-name
        run: |
          NAME=${{ (github.ref == 'refs/heads/develop' && 'find-dev-image') || (startsWith(github.ref, 'refs/heads/release') && 'find-qa-image') }}
          echo "name=$NAME" >> $GITHUB_OUTPUT
        
      - name: Save Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: docker save --output ${{ steps.docker-image-name.outputs.name }}.tar $ECR_REGISTRY/find-a-grant-client:${{ env.BUILD_VERSION }}

      - name: Upload Docker image
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.docker-image-name.outputs.name }}
          path: ${{ steps.docker-image-name.outputs.name }}.tar
          retention-days: 1

  deploy:
    name: Deploy docker image

    needs: [build, test]

    environment: AWS
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          # Fetch all commits since we use the total commit count to determine the build version
          fetch-depth: 0

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine & set BUILD_VERSION
        run: |
          GIT_COUNT=$(git rev-list $GITHUB_SHA --count)
          echo "BUILD_VERSION=b_$GIT_COUNT" >> $GITHUB_ENV
          echo BUILD_VERSION is ${{ env.BUILD_VERSION }}

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.docker-image-name }}

      - name: Load Docker image
        run: docker load --input ${{ needs.build.outputs.docker-image-name }}.tar
            
      - name: Push Docker image to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: docker push $ECR_REGISTRY/find-a-grant-client:${{ env.BUILD_VERSION }}

      - name: Create env tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ENV_TAG=${{ (github.ref == 'refs/heads/develop' && 'develop') || (startsWith(github.ref, 'refs/heads/release') && 'test') }}
          docker tag $ECR_REGISTRY/find-a-grant-client:${{ env.BUILD_VERSION }} $ECR_REGISTRY/find-a-grant-client:$ENV_TAG
          docker push $ECR_REGISTRY/find-a-grant-client:$ENV_TAG

      - name: Create release tag - if we are committing to a release branch
        if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          RELEASE_VERSION=V_${GITHUB_REF##*/}
          docker tag $ECR_REGISTRY/find-a-grant-client:${{ env.BUILD_VERSION }} $ECR_REGISTRY/find-a-grant-client:$RELEASE_VERSION
          docker push $ECR_REGISTRY/find-a-grant-client:$RELEASE_VERSION

      - name: Wait for CodePipeline
        run: |
          sleep 10
          TIME_TAKEN=0
          PIPELINE_STATE=$(aws codepipeline get-pipeline-state --name ${{ (github.ref == 'refs/heads/develop' && 'Build-Find-Frontend') || (startsWith(github.ref, 'refs/heads/release') && 'Build-Find-Frontend-Test') }} --query "join(' ', stageStates[?stageName].latestExecution.status)")
          delimiter=' ' read -ra states <<< "${PIPELINE_STATE[0]}"
          declare -p states

          while printf '%s\n' "${states[@]}" | grep -qEv "Succeeded"; do
            TIME_TAKEN=$((TIME_TAKEN+10))
            if (( $TIME_TAKEN > 600 )); then
              echo "Waiting for CodePipeline timed out after 10 minutes. Exiting."
              exit 1
            fi

            sleep 10

            PIPELINE_STATE=$(aws codepipeline get-pipeline-state --name ${{ (github.ref == 'refs/heads/develop' && 'Build-Find-Frontend') || (startsWith(github.ref, 'refs/heads/release') && 'Build-Find-Frontend-Test') }} --query "join(' ', stageStates[?stageName].latestExecution.status)")
            delimiter=' ' read -ra states <<< "${PIPELINE_STATE[0]}"
            declare -p states
          done

  postBuildTest: 
    needs: [build, imageBuild]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3


      - name: Read .nvmrc
        run: echo "::set-output name=NVMRC::$(cat .nvmrc)"
        id: nvm

      - name: Setup node
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Read yarn cache directory path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
        id: yarn-cache-dir-path

      - name: Cache dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          yarn install
      - name: Determine cypress url
        run: |
          if [[  github.ref == 'refs/heads/develop' ]]; then
            echo "ENV_HOST=${{secrets.AWS_DEV_URL}}" >> "$GITHUB_ENV"
            echo "ENVIRONMENT=DEV" >> "$GITHUB_ENV"
          else
            echo "ENV_HOST=${{secrets.AWS_TEST_URL}}" >> "$GITHUB_ENV"
            echo "ENVIRONMENT=TEST" >> "$GITHUB_ENV"
          fi
      - name: Run cypress tests
        uses: cypress-io/github-action@v5
        with:
          config: baseUrl=${{env.ENV_HOST}}
          browser: chrome
          runTests: true
          spec: cypress/integration/dev/**/*
        env:
          CYPRESS_APPLY_FOR_A_GRANT_APPLICANT_URL: 'https://sandbox-gap.service.cabinetoffice.gov.uk/apply/applicant'

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          token: ${{secrets.ZAP_ACCESS_TOKEN}}
          target: "${{env.ENV_HOST}}/"
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          issue_title: '${{env.ENVIRONMENT}}: ZAP Full Scan Report'
