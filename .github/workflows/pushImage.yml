name: Push Image Workflow

on:
  create:
  push:
    branches:
      - release/**
      - develop
    paths-ignore:
      - "*.md"

env:
  AWS_REGION: eu-west-2

jobs:
  build:
    name: Build Feature

    # Need to check here as create event can't be filtered by branch name...
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Generate .env
        run: |
          cat << EOF > .env
          CONTENTFUL_SPACE_ID=${{ secrets.QA_CONTENTFUL_SPACE_ID }}
          CONTENTFUL_ACCESS_TOKEN=${{ secrets.QA_CONTENTFUL_ACCESS_TOKEN }}
          CONTENTFUL_PREVIEW_ACCESS_TOKEN=${{ secrets.QA_CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
          CONTENTFUL_ENVIRONMENT=${{ secrets.QA_CONTENTFUL_ENVIRONMENT }}
          ELASTIC_INDEX=${{ secrets.QA_ELASTIC_INDEX }}
          ELASTIC_URL=${{ secrets.QA_ELASTIC_URL }}
          ELASTIC_USERNAME=${{ secrets.QA_ELASTIC_USERNAME }}
          ELASTIC_PASSWORD=${{ secrets.QA_ELASTIC_PASSWORD }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE=${{ secrets.GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE }}
          GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE_UNSUBSCRIBE=${{ secrets.GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE_UNSUBSCRIBE }}
          GOV_NOTIFY_API_KEY=${{ secrets.GOV_NOTIFY_API_KEY }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DATABASE_SSL=true
          ENCRYPTION_KEY_NAME=${{ secrets.QA_ENCRYPTION_KEY_NAME }}
          ENCRYPTION_KEY_NAMESPACE=${{ secrets.QA_ENCRYPTION_KEY_NAMESPACE }}
          ENCRYPTION_ORIGIN=${{ secrets.QA_ENCRYPTION_ORIGIN }}
          ENCRYPTION_STAGE=${{ secrets.QA_ENCRYPTION_STAGE }}
          ENCRYPTION_WRAPPING_KEY=${{ secrets.QA_ENCRYPTION_WRAPPING_KEY }}
          GOV_NOTIFY_SAVED_SEARCH_CONFIRMATION_TEMPLATE=${{ secrets.QA_GOV_NOTIFY_SAVED_SEARCH_CONFIRMATION_TEMPLATE }}
          APPLY_FOR_A_GRANT_APPLICANT_URL=${{ secrets.QA_APPLY_FOR_A_GRANT_APPLICANT_URL}}
          ENABLE_FAQ_TAB=false
          ENABLE_AWARDS_TAB=false
          HOST=${{ secrets.QA_ENVIRONMENT_URL }}
          BACKEND_HOST=${{ secrets.QA_BACKEND_HOST }}
          BASIC_AUTH_USERNAME=${{ secrets.BASIC_AUTH_USERNAME }}
          BASIC_AUTH_PASSWORD=${{ secrets.BASIC_AUTH_PASSWORD }}
          VERIFICATION_JWT_EXPIRY_TIME=${{ secrets.VERIFICATION_JWT_EXPIRY_TIME }}
          EOF

      - name: Read .nvmrc
        run: echo "::set-output name=NVMRC::$(cat .nvmrc)"
        id: nvm

      - name: Setup node
        uses: actions/setup-node@master
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"

      - name: Snyk setup
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --fail-on=all

      - name: Read yarn cache directory path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
        id: yarn-cache-dir-path

      - name: Cache dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          yarn install
      - name: Lint files
        run: |
          yarn lint
      - name: Build application
        run: |
          yarn build
      - name: Units Tests
        run: |
          yarn coverage

  imageBuild:
    needs: build

    environment: AWS
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          # Fetch all commits since we use the total commit count to determine the build version
          fetch-depth: 0

      - name: Generate .env
        run: |
          cat << EOF > .env
          CONTENTFUL_SPACE_ID=${{ secrets.QA_CONTENTFUL_SPACE_ID }}
          CONTENTFUL_ACCESS_TOKEN=${{ secrets.QA_CONTENTFUL_ACCESS_TOKEN }}
          CONTENTFUL_PREVIEW_ACCESS_TOKEN=${{ secrets.QA_CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
          CONTENTFUL_ENVIRONMENT=${{ secrets.QA_CONTENTFUL_ENVIRONMENT }}
          ELASTIC_INDEX=${{ secrets.QA_ELASTIC_INDEX }}
          ELASTIC_URL=${{ secrets.QA_ELASTIC_URL }}
          ELASTIC_USERNAME=${{ secrets.QA_ELASTIC_USERNAME }}
          ELASTIC_PASSWORD=${{ secrets.QA_ELASTIC_PASSWORD }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE=${{ secrets.GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE }}
          GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE_UNSUBSCRIBE=${{ secrets.GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE_UNSUBSCRIBE }}
          GOV_NOTIFY_API_KEY=${{ secrets.GOV_NOTIFY_API_KEY }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DATABASE_SSL=true
          ENCRYPTION_KEY_NAME=${{ secrets.QA_ENCRYPTION_KEY_NAME }}
          ENCRYPTION_KEY_NAMESPACE=${{ secrets.QA_ENCRYPTION_KEY_NAMESPACE }}
          ENCRYPTION_ORIGIN=${{ secrets.QA_ENCRYPTION_ORIGIN }}
          ENCRYPTION_STAGE=${{ secrets.QA_ENCRYPTION_STAGE }}
          ENCRYPTION_WRAPPING_KEY=${{ secrets.QA_ENCRYPTION_WRAPPING_KEY }}
          GOV_NOTIFY_SAVED_SEARCH_CONFIRMATION_TEMPLATE=${{ secrets.QA_GOV_NOTIFY_SAVED_SEARCH_CONFIRMATION_TEMPLATE }}
          APPLY_FOR_A_GRANT_APPLICANT_URL=${{ secrets.QA_APPLY_FOR_A_GRANT_APPLICANT_URL}}
          ENABLE_FAQ_TAB=false
          ENABLE_AWARDS_TAB=false
          HOST=${{ secrets.QA_ENVIRONMENT_URL }}
          BACKEND_HOST=${{ secrets.QA_BACKEND_HOST }}
          BASIC_AUTH_USERNAME=${{ secrets.BASIC_AUTH_USERNAME }}
          BASIC_AUTH_PASSWORD=${{ secrets.BASIC_AUTH_PASSWORD }}
          VERIFICATION_JWT_EXPIRY_TIME=${{ secrets.VERIFICATION_JWT_EXPIRY_TIME }}
          EOF

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Determine & set BUILD_VERSION
        run: |
          GIT_COUNT=$(git rev-list $GITHUB_SHA --count)
          echo "BUILD_VERSION=b_$GIT_COUNT" >> $GITHUB_ENV
          echo BUILD_VERSION is ${{ env.BUILD_VERSION }}

      - name: Build, tag and push Docker image to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/find-a-grant-client:${{ env.BUILD_VERSION }} .
          docker push $ECR_REGISTRY/find-a-grant-client:${{ env.BUILD_VERSION }}

      - name: Create env tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ENV_TAG=${{ (github.ref == 'refs/heads/develop' && 'develop') || (startsWith(github.ref, 'refs/heads/release') && 'test') }}
          docker tag $ECR_REGISTRY/find-a-grant-client:${{ env.BUILD_VERSION }} $ECR_REGISTRY/find-a-grant-client:$ENV_TAG
          docker push $ECR_REGISTRY/find-a-grant-client:$ENV_TAG

      - name: Create release tag - if we are committing to a release branch
        if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          RELEASE_VERSION=V_${GITHUB_REF##*/}
          docker tag $ECR_REGISTRY/find-a-grant-client:${{ env.BUILD_VERSION }} $ECR_REGISTRY/find-a-grant-client:$RELEASE_VERSION
          docker push $ECR_REGISTRY/find-a-grant-client:$RELEASE_VERSION

  postBuildTest: 
    needs: [build, imageBuild]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3


      - name: Read .nvmrc
        run: echo "::set-output name=NVMRC::$(cat .nvmrc)"
        id: nvm

      - name: Setup node
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Read yarn cache directory path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
        id: yarn-cache-dir-path

      - name: Cache dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          yarn install
      - name: Determine cypress url
        run: |
          if [[  github.ref == 'refs/heads/develop' ]]; then
            echo "ENV_HOST=${{secrets.AWS_DEV_URL}}" >> "$GITHUB_ENV"
            echo "ENVIRONMENT=DEV" >> "$GITHUB_ENV"
          else
            echo "ENV_HOST=${{secrets.AWS_TEST_URL}}" >> "$GITHUB_ENV"
            echo "ENVIRONMENT=TEST" >> "$GITHUB_ENV"
          fi
      - name: Run cypress tests
        uses: cypress-io/github-action@v2
        with:
          config: baseUrl=${{env.ENV_HOST}}
          browser: chrome
          runTests: true
          spec: cypress/integration/dev/**/*

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          token: ${{secrets.ZAP_ACCESS_TOKEN}}
          target: "${{env.ENV_HOST}}/"
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          issue_title: '${{env.ENVIRONMENT}}: ZAP Full Scan Report'