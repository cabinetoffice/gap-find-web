name: Dev Deployment Workflow

on:
  push:
    branches:
      - develop
    paths-ignore:
      - '*.md'

  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)    
        required: false

env:
  DATABASE_URL: postgres://postgres:mysecretpassword@localhost:5432/notifications

concurrency: 

  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # ==============================

  DeployDev:

    name: Deploy To Dev
    runs-on: ubuntu-latest

    env:
      CF_API: "https://api.london.cloud.service.gov.uk"
      CF_ORG: "cabinet-office-gap"
      CF_SPACE: "dev"
      CF_APP: "d_gap"

    permissions:
      contents: read

    steps:
      - name: Deployment message 
        run: echo "Deploying ${CF_APP}@${CF_VERSION} to ${CF_SPACE} environment. Visit https://${CF_APP}.london.cloudapps.digital"

      - name: Checkout repo
        uses: actions/checkout@master 

      - name: Generate .env  
        run: |
          cat << EOF > .env
          CONTENTFUL_SPACE_ID=${{ secrets.DEV_CONTENTFUL_SPACE_ID }}
          CONTENTFUL_ACCESS_TOKEN=${{ secrets.DEV_CONTENTFUL_ACCESS_TOKEN }}
          CONTENTFUL_PREVIEW_ACCESS_TOKEN=${{ secrets.DEV_CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
          CONTENTFUL_ENVIRONMENT=${{ secrets.DEV_CONTENTFUL_ENVIRONMENT }}
          ELASTIC_INDEX=${{ secrets.DEV_ELASTIC_INDEX }}
          ELASTIC_URL=${{ secrets.DEV_ELASTIC_URL }}
          ELASTIC_USERNAME=${{ secrets.DEV_ELASTIC_USERNAME }}
          ELASTIC_PASSWORD=${{ secrets.DEV_ELASTIC_PASSWORD }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE=${{ secrets.GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE }}
          GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE_UNSUBSCRIBE=${{ secrets.GOV_NOTIFY_NOTIFICATION_EMAIL_TEMPLATE_UNSUBSCRIBE }}
          GOV_NOTIFY_NOTIFICATION_EMAIL_NEWSLETTER_TEMPLATE=${{ secrets.GOV_NOTIFY_NOTIFICATION_EMAIL_NEWSLETTER_TEMPLATE }}
          GOV_NOTIFY_API_KEY=${{ secrets.GOV_NOTIFY_API_KEY_REAL }}
          DATABASE_SSL=true
          ENABLE_FAQ_TAB=false
          ENABLE_AWARDS_TAB=false
          HOST=${{ secrets.DEV_ENVIRONMENT_URL }}
          BACKEND_HOST=${{ secrets.DEV_BACKEND_HOST }}
          VERIFICATION_JWT_EXPIRY_TIME=${{ secrets.VERIFICATION_JWT_EXPIRY_TIME }}
          ENCRYPTION_KEY_NAME=${{ secrets.DEV_ENCRYPTION_KEY_NAME }}
          ENCRYPTION_KEY_NAMESPACE=${{ secrets.DEV_ENCRYPTION_KEY_NAMESPACE }}
          ENCRYPTION_ORIGIN=${{ secrets.DEV_ENCRYPTION_ORIGIN }}
          ENCRYPTION_STAGE=${{ secrets.DEV_ENCRYPTION_STAGE }}
          ENCRYPTION_WRAPPING_KEY=${{ secrets.DEV_ENCRYPTION_WRAPPING_KEY }}
          BASIC_AUTH_USERNAME=${{ secrets.BASIC_AUTH_USERNAME }}
          BASIC_AUTH_PASSWORD=${{ secrets.BASIC_AUTH_PASSWORD }}
          GOV_NOTIFY_SAVED_SEARCH_CONFIRMATION_TEMPLATE=${{ secrets.DEV_GOV_NOTIFY_SAVED_SEARCH_CONFIRMATION_TEMPLATE }}
          APPLY_FOR_A_GRANT_APPLICANT_URL=${{ secrets.DEV_APPLY_FOR_A_GRANT_APPLICANT_URL}}
          EOF

      - name: Read .nvmrc 
        run: echo "::set-output name=NVMRC::$(cat .nvmrc)" 
        id: nvm

      - name: Setup node
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}' 

      - name: Snyk setup
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --fail-on=all

      - name: Install yarn
        run: npm install -g yarn

      - name: Read yarn cache directory path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
        id: yarn-cache-dir-path

      - name: Cache dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **/node_modules
          key: ${{ runner.os }}-yarn-v2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v2-

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          yarn install --frozen-lockfile
      
      - name: Units Tests
        run: |
          yarn coverage

      - name: Lint files
        run: |
          yarn lint

      - name: Build application
        run: |
          yarn build  

      - name: Cache application build
        uses: actions/cache@v2
        id: build-cache
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: gap-cache-build-${{ github.event.pull_request.head.sha }} 

      - name: Install Cloud Foundary
        run: |
          wget -q -O cf.tar.gz "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=7.4.0&source=github-rel"
          sudo tar xzf cf.tar.gz --wildcards --directory /usr/local/bin/ "cf*"

      - name: Login to GPaas
        env:
          CF_USERNAME: ${{ secrets.CF_USERNAME }}
          CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
        run: |
          echo "Login into ${CF_ORG}/${CF_SPACE}..."
          cf api "${CF_API}"
          cf auth
          cf target -o "${CF_ORG}" -s "${CF_SPACE}"
          cf apps

      - name: Deploy to GPaaS
        run: |
          if [ -f ./yarn.lock ]; then mv ./yarn.lock ./yarn.lock.old; fi
          cf push "${CF_APP}" -f manifest.yml --strategy rolling 
          if [ -f ./yarn.lock.old ]; then mv ./yarn.lock.old ./yarn.lock; fi

      - name: Logout of GPaaS
        run: |
          cf env "${CF_APP}"
          cf logout

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Run cypress tests
        uses: cypress-io/github-action@v2
        with:
          config: baseUrl=${{ secrets.CYPRESS_DEV_BASEURL }}
          browser: chrome
          runTests: true
          spec: cypress/integration/dev/**/*

      - name: zap scan
        uses: zaproxy/action-full-scan@v0.3.0
        with: 
          token: ${{ secrets.ZAP_ACCESS_TOKEN}}
          target: ${{ secrets.DEV_ZAP_TARGET_URL}}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          allow_issue_writing: true
          issue_title: 'Dev ZAP Full Scan Report'

  # ==============================
